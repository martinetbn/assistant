import { app, BrowserWindow, shell } from "electron";
import { APP_CONFIG } from "../shared/constants/app-constants";
import { createMainWindow } from "./windows/main-window";
import { setupIpcHandlers } from "./handlers/ipc-handlers";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Keep a global reference of the window object
let mainWindow: BrowserWindow | null = null;

/**
 * Create the main application window
 */
const createWindow = (): void => {
  mainWindow = createMainWindow({
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Load the renderer
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open DevTools in development
  if (APP_CONFIG.DEV_TOOLS) {
    mainWindow.webContents.openDevTools();
  }

  // Handle window closed
  mainWindow.on("closed", () => {
    mainWindow = null;
  });
};

/**
 * Initialize the application
 */
const initializeApp = async (): Promise<void> => {
  // Setup IPC handlers
  setupIpcHandlers();
  
  // Create main window
  createWindow();
};

// App event handlers
app.on("ready", initializeApp);

app.on("window-all-closed", () => {
  // On OS X it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Security: Handle external links
app.on("web-contents-created", (event, contents) => {
  contents.setWindowOpenHandler(({ url }) => {
    // Open external links in default browser
    shell.openExternal(url);
    return { action: 'deny' };
  });
});

// Security: Prevent navigation to external websites
app.on("web-contents-created", (event, contents) => {
  contents.on("will-navigate", (navigationEvent, url) => {
    // Allow navigation within the app
    if (url.startsWith('file://') || url === MAIN_WINDOW_WEBPACK_ENTRY) {
      return;
    }
    
    // Prevent external navigation
    navigationEvent.preventDefault();
  });
});

// Export for testing
export { mainWindow };
